'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.17929
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
'
Namespace SendMessage
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="myWebServiceSoap", [Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Parameter()))>  _
    Partial Public Class myWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private NotifyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EchoOfSendSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecvSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FinishedSendMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FinishedSendMessageQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MatchAccountsManualOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewMessageQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUpgrageLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.klMessage.My.MySettings.Default.klMessage_SendMessage_myWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event NotifyStatusCompleted As NotifyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event EchoOfSendSMSCompleted As EchoOfSendSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event RecvSMSCompleted As RecvSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMessageCompleted As SendMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event FinishedSendMessageCompleted As FinishedSendMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event FinishedSendMessageQueueCompleted As FinishedSendMessageQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event MatchAccountsManualCompleted As MatchAccountsManualCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewMessageQueueCompleted As AddNewMessageQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewMessageCompleted As AddNewMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event getDataCompleted As getDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteCompleted As ExecuteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCompleted As UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewVersionCompleted As GetNewVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUpgrageLogCompleted As GetUpgrageLogCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("NotifyStatus", RequestNamespace:="", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Sub NotifyStatus(ByVal eventID As Integer, ByVal sessionID As String, ByVal res As Integer, ByVal para1 As String)
            Me.Invoke("NotifyStatus", New Object() {eventID, sessionID, res, para1})
        End Sub
        
        '''<remarks/>
        Public Function BeginNotifyStatus(ByVal eventID As Integer, ByVal sessionID As String, ByVal res As Integer, ByVal para1 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NotifyStatus", New Object() {eventID, sessionID, res, para1}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndNotifyStatus(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NotifyStatusAsync(ByVal eventID As Integer, ByVal sessionID As String, ByVal res As Integer, ByVal para1 As String)
            Me.NotifyStatusAsync(eventID, sessionID, res, para1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NotifyStatusAsync(ByVal eventID As Integer, ByVal sessionID As String, ByVal res As Integer, ByVal para1 As String, ByVal userState As Object)
            If (Me.NotifyStatusOperationCompleted Is Nothing) Then
                Me.NotifyStatusOperationCompleted = AddressOf Me.OnNotifyStatusOperationCompleted
            End If
            Me.InvokeAsync("NotifyStatus", New Object() {eventID, sessionID, res, para1}, Me.NotifyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnNotifyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.NotifyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NotifyStatusCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("EchoOfSendSMS", RequestNamespace:="", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Sub EchoOfSendSMS(ByVal ucNum As String, ByVal cee As String, ByVal msgid As Integer, ByVal res As Integer, ByVal recvt As String)
            Me.Invoke("EchoOfSendSMS", New Object() {ucNum, cee, msgid, res, recvt})
        End Sub
        
        '''<remarks/>
        Public Function BeginEchoOfSendSMS(ByVal ucNum As String, ByVal cee As String, ByVal msgid As Integer, ByVal res As Integer, ByVal recvt As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EchoOfSendSMS", New Object() {ucNum, cee, msgid, res, recvt}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndEchoOfSendSMS(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EchoOfSendSMSAsync(ByVal ucNum As String, ByVal cee As String, ByVal msgid As Integer, ByVal res As Integer, ByVal recvt As String)
            Me.EchoOfSendSMSAsync(ucNum, cee, msgid, res, recvt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EchoOfSendSMSAsync(ByVal ucNum As String, ByVal cee As String, ByVal msgid As Integer, ByVal res As Integer, ByVal recvt As String, ByVal userState As Object)
            If (Me.EchoOfSendSMSOperationCompleted Is Nothing) Then
                Me.EchoOfSendSMSOperationCompleted = AddressOf Me.OnEchoOfSendSMSOperationCompleted
            End If
            Me.InvokeAsync("EchoOfSendSMS", New Object() {ucNum, cee, msgid, res, recvt}, Me.EchoOfSendSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnEchoOfSendSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.EchoOfSendSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EchoOfSendSMSCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("RecvSMS", RequestNamespace:="", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function RecvSMS(ByVal caller As String, ByVal time As String, ByVal cont As String, ByVal ucNum As String) As String
            Dim results() As Object = Me.Invoke("RecvSMS", New Object() {caller, time, cont, ucNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRecvSMS(ByVal caller As String, ByVal time As String, ByVal cont As String, ByVal ucNum As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RecvSMS", New Object() {caller, time, cont, ucNum}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRecvSMS(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecvSMSAsync(ByVal caller As String, ByVal time As String, ByVal cont As String, ByVal ucNum As String)
            Me.RecvSMSAsync(caller, time, cont, ucNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecvSMSAsync(ByVal caller As String, ByVal time As String, ByVal cont As String, ByVal ucNum As String, ByVal userState As Object)
            If (Me.RecvSMSOperationCompleted Is Nothing) Then
                Me.RecvSMSOperationCompleted = AddressOf Me.OnRecvSMSOperationCompleted
            End If
            Me.InvokeAsync("RecvSMS", New Object() {caller, time, cont, ucNum}, Me.RecvSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecvSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecvSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecvSMSCompleted(Me, New RecvSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("SendMessage", RequestNamespace:="", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function SendMessage(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal RecipientsCount As Integer, ByVal SessionID As String, ByVal RegisterUsercode As String, ByVal AccessUsercode As String, ByVal CONNID As Long, ByVal Nettype As Integer) As Long
            Dim results() As Object = Me.Invoke("SendMessage", New Object() {Usercode, Password, Recipients, RecipientsCount, SessionID, RegisterUsercode, AccessUsercode, CONNID, Nettype})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Function BeginSendMessage(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal RecipientsCount As Integer, ByVal SessionID As String, ByVal RegisterUsercode As String, ByVal AccessUsercode As String, ByVal CONNID As Long, ByVal Nettype As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendMessage", New Object() {Usercode, Password, Recipients, RecipientsCount, SessionID, RegisterUsercode, AccessUsercode, CONNID, Nettype}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendMessage(ByVal asyncResult As System.IAsyncResult) As Long
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal RecipientsCount As Integer, ByVal SessionID As String, ByVal RegisterUsercode As String, ByVal AccessUsercode As String, ByVal CONNID As Long, ByVal Nettype As Integer)
            Me.SendMessageAsync(Usercode, Password, Recipients, RecipientsCount, SessionID, RegisterUsercode, AccessUsercode, CONNID, Nettype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal Recipients As String, ByVal RecipientsCount As Integer, ByVal SessionID As String, ByVal RegisterUsercode As String, ByVal AccessUsercode As String, ByVal CONNID As Long, ByVal Nettype As Integer, ByVal userState As Object)
            If (Me.SendMessageOperationCompleted Is Nothing) Then
                Me.SendMessageOperationCompleted = AddressOf Me.OnSendMessageOperationCompleted
            End If
            Me.InvokeAsync("SendMessage", New Object() {Usercode, Password, Recipients, RecipientsCount, SessionID, RegisterUsercode, AccessUsercode, CONNID, Nettype}, Me.SendMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMessageCompleted(Me, New SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/FinishedSendMessage", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FinishedSendMessage(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String) As Integer
            Dim results() As Object = Me.Invoke("FinishedSendMessage", New Object() {Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, RecipientsCount, NetType, Status, ErrorText})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginFinishedSendMessage(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FinishedSendMessage", New Object() {Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, RecipientsCount, NetType, Status, ErrorText}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFinishedSendMessage(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FinishedSendMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String)
            Me.FinishedSendMessageAsync(Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, RecipientsCount, NetType, Status, ErrorText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FinishedSendMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String, ByVal userState As Object)
            If (Me.FinishedSendMessageOperationCompleted Is Nothing) Then
                Me.FinishedSendMessageOperationCompleted = AddressOf Me.OnFinishedSendMessageOperationCompleted
            End If
            Me.InvokeAsync("FinishedSendMessage", New Object() {Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, RecipientsCount, NetType, Status, ErrorText}, Me.FinishedSendMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnFinishedSendMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.FinishedSendMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FinishedSendMessageCompleted(Me, New FinishedSendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/FinishedSendMessageQueue", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FinishedSendMessageQueue(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal QueueID As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String) As Integer
            Dim results() As Object = Me.Invoke("FinishedSendMessageQueue", New Object() {Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, QueueID, RecipientsCount, NetType, Status, ErrorText})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginFinishedSendMessageQueue(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal QueueID As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FinishedSendMessageQueue", New Object() {Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, QueueID, RecipientsCount, NetType, Status, ErrorText}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFinishedSendMessageQueue(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FinishedSendMessageQueueAsync(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal QueueID As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String)
            Me.FinishedSendMessageQueueAsync(Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, QueueID, RecipientsCount, NetType, Status, ErrorText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FinishedSendMessageQueueAsync(ByVal Usercode As String, ByVal Password As String, ByVal Registerusercode As String, ByVal AccessUsercode As String, ByVal SessionID As String, ByVal MessageId As String, ByVal QueueID As String, ByVal RecipientsCount As Long, ByVal NetType As Integer, ByVal Status As Integer, ByVal ErrorText As String, ByVal userState As Object)
            If (Me.FinishedSendMessageQueueOperationCompleted Is Nothing) Then
                Me.FinishedSendMessageQueueOperationCompleted = AddressOf Me.OnFinishedSendMessageQueueOperationCompleted
            End If
            Me.InvokeAsync("FinishedSendMessageQueue", New Object() {Usercode, Password, Registerusercode, AccessUsercode, SessionID, MessageId, QueueID, RecipientsCount, NetType, Status, ErrorText}, Me.FinishedSendMessageQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnFinishedSendMessageQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.FinishedSendMessageQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FinishedSendMessageQueueCompleted(Me, New FinishedSendMessageQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/MatchAccountsManual", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MatchAccountsManual(ByVal Usercode As String, ByVal Password As String) As Integer
            Dim results() As Object = Me.Invoke("MatchAccountsManual", New Object() {Usercode, Password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginMatchAccountsManual(ByVal Usercode As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MatchAccountsManual", New Object() {Usercode, Password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMatchAccountsManual(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MatchAccountsManualAsync(ByVal Usercode As String, ByVal Password As String)
            Me.MatchAccountsManualAsync(Usercode, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MatchAccountsManualAsync(ByVal Usercode As String, ByVal Password As String, ByVal userState As Object)
            If (Me.MatchAccountsManualOperationCompleted Is Nothing) Then
                Me.MatchAccountsManualOperationCompleted = AddressOf Me.OnMatchAccountsManualOperationCompleted
            End If
            Me.InvokeAsync("MatchAccountsManual", New Object() {Usercode, Password}, Me.MatchAccountsManualOperationCompleted, userState)
        End Sub
        
        Private Sub OnMatchAccountsManualOperationCompleted(ByVal arg As Object)
            If (Not (Me.MatchAccountsManualCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MatchAccountsManualCompleted(Me, New MatchAccountsManualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/AddNewMessageQueue", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewMessageQueue(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal QueueID As String, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("AddNewMessageQueue", New Object() {Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, QueueID, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewMessageQueue( _
                    ByVal Usercode As String,  _
                    ByVal Password As String,  _
                    ByVal SessionID As String,  _
                    ByVal RecipientCount As Long,  _
                    ByVal Nettype As Integer,  _
                    ByVal Content As String,  _
                    ByVal MessageType As Integer,  _
                    ByVal QueueID As String,  _
                    ByVal IP As String,  _
                    ByVal MAC As String,  _
                    ByVal ComputerName As String,  _
                    ByVal ComputerUserName As String,  _
                    ByVal CPUID As String,  _
                    ByVal DisckID As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewMessageQueue", New Object() {Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, QueueID, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewMessageQueue(ByVal asyncResult As System.IAsyncResult) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewMessageQueueAsync(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal QueueID As String, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String)
            Me.AddNewMessageQueueAsync(Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, QueueID, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewMessageQueueAsync(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal QueueID As String, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String, ByVal userState As Object)
            If (Me.AddNewMessageQueueOperationCompleted Is Nothing) Then
                Me.AddNewMessageQueueOperationCompleted = AddressOf Me.OnAddNewMessageQueueOperationCompleted
            End If
            Me.InvokeAsync("AddNewMessageQueue", New Object() {Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, QueueID, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID}, Me.AddNewMessageQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewMessageQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewMessageQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewMessageQueueCompleted(Me, New AddNewMessageQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/AddNewMessage", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewMessage(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("AddNewMessage", New Object() {Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewMessage(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewMessage", New Object() {Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewMessage(ByVal asyncResult As System.IAsyncResult) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String)
            Me.AddNewMessageAsync(Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewMessageAsync(ByVal Usercode As String, ByVal Password As String, ByVal SessionID As String, ByVal RecipientCount As Long, ByVal Nettype As Integer, ByVal Content As String, ByVal MessageType As Integer, ByVal IP As String, ByVal MAC As String, ByVal ComputerName As String, ByVal ComputerUserName As String, ByVal CPUID As String, ByVal DisckID As String, ByVal userState As Object)
            If (Me.AddNewMessageOperationCompleted Is Nothing) Then
                Me.AddNewMessageOperationCompleted = AddressOf Me.OnAddNewMessageOperationCompleted
            End If
            Me.InvokeAsync("AddNewMessage", New Object() {Usercode, Password, SessionID, RecipientCount, Nettype, Content, MessageType, IP, MAC, ComputerName, ComputerUserName, CPUID, DisckID}, Me.AddNewMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewMessageCompleted(Me, New AddNewMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/Login", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal Usercode As String, ByVal Password As String, ByVal Version As String, ByVal IP As String, ByVal MAC As String, ByVal CPUID As String, ByVal DISCKID As String, ByVal COMPUTERNAME As String, ByVal ComputerUserName As String, ByVal Options As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Login", New Object() {Usercode, Password, Version, IP, MAC, CPUID, DISCKID, COMPUTERNAME, ComputerUserName, Options})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginLogin(ByVal Usercode As String, ByVal Password As String, ByVal Version As String, ByVal IP As String, ByVal MAC As String, ByVal CPUID As String, ByVal DISCKID As String, ByVal COMPUTERNAME As String, ByVal ComputerUserName As String, ByVal Options As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Login", New Object() {Usercode, Password, Version, IP, MAC, CPUID, DISCKID, COMPUTERNAME, ComputerUserName, Options}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogin(ByVal asyncResult As System.IAsyncResult) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal Usercode As String, ByVal Password As String, ByVal Version As String, ByVal IP As String, ByVal MAC As String, ByVal CPUID As String, ByVal DISCKID As String, ByVal COMPUTERNAME As String, ByVal ComputerUserName As String, ByVal Options As String)
            Me.LoginAsync(Usercode, Password, Version, IP, MAC, CPUID, DISCKID, COMPUTERNAME, ComputerUserName, Options, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal Usercode As String, ByVal Password As String, ByVal Version As String, ByVal IP As String, ByVal MAC As String, ByVal CPUID As String, ByVal DISCKID As String, ByVal COMPUTERNAME As String, ByVal ComputerUserName As String, ByVal Options As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {Usercode, Password, Version, IP, MAC, CPUID, DISCKID, COMPUTERNAME, ComputerUserName, Options}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/getData", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getData(ByVal Usercode As String, ByVal Password As String, ByVal QueryString As Command) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getData", New Object() {Usercode, Password, QueryString})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetData(ByVal Usercode As String, ByVal Password As String, ByVal QueryString As Command, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getData", New Object() {Usercode, Password, QueryString}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetData(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getDataAsync(ByVal Usercode As String, ByVal Password As String, ByVal QueryString As Command)
            Me.getDataAsync(Usercode, Password, QueryString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getDataAsync(ByVal Usercode As String, ByVal Password As String, ByVal QueryString As Command, ByVal userState As Object)
            If (Me.getDataOperationCompleted Is Nothing) Then
                Me.getDataOperationCompleted = AddressOf Me.OngetDataOperationCompleted
            End If
            Me.InvokeAsync("getData", New Object() {Usercode, Password, QueryString}, Me.getDataOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.getDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDataCompleted(Me, New getDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/Execute", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Execute(ByVal Usercode As String, ByVal Password As String, ByVal Command As Command) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Execute", New Object() {Usercode, Password, Command})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginExecute(ByVal Usercode As String, ByVal Password As String, ByVal Command As Command, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Execute", New Object() {Usercode, Password, Command}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndExecute(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteAsync(ByVal Usercode As String, ByVal Password As String, ByVal Command As Command)
            Me.ExecuteAsync(Usercode, Password, Command, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteAsync(ByVal Usercode As String, ByVal Password As String, ByVal Command As Command, ByVal userState As Object)
            If (Me.ExecuteOperationCompleted Is Nothing) Then
                Me.ExecuteOperationCompleted = AddressOf Me.OnExecuteOperationCompleted
            End If
            Me.InvokeAsync("Execute", New Object() {Usercode, Password, Command}, Me.ExecuteOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteCompleted(Me, New ExecuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/Update", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update(ByVal Usercode As String, ByVal Password As String, ByVal ds As System.Data.DataSet, ByVal MetaQueryString As String, ByVal UpdateCommand As Command, ByVal InsertCommand As Command, ByVal DeleteCommand As Command) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Update", New Object() {Usercode, Password, ds, MetaQueryString, UpdateCommand, InsertCommand, DeleteCommand})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdate(ByVal Usercode As String, ByVal Password As String, ByVal ds As System.Data.DataSet, ByVal MetaQueryString As String, ByVal UpdateCommand As Command, ByVal InsertCommand As Command, ByVal DeleteCommand As Command, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Update", New Object() {Usercode, Password, ds, MetaQueryString, UpdateCommand, InsertCommand, DeleteCommand}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdate(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal Usercode As String, ByVal Password As String, ByVal ds As System.Data.DataSet, ByVal MetaQueryString As String, ByVal UpdateCommand As Command, ByVal InsertCommand As Command, ByVal DeleteCommand As Command)
            Me.UpdateAsync(Usercode, Password, ds, MetaQueryString, UpdateCommand, InsertCommand, DeleteCommand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal Usercode As String, ByVal Password As String, ByVal ds As System.Data.DataSet, ByVal MetaQueryString As String, ByVal UpdateCommand As Command, ByVal InsertCommand As Command, ByVal DeleteCommand As Command, ByVal userState As Object)
            If (Me.UpdateOperationCompleted Is Nothing) Then
                Me.UpdateOperationCompleted = AddressOf Me.OnUpdateOperationCompleted
            End If
            Me.InvokeAsync("Update", New Object() {Usercode, Password, ds, MetaQueryString, UpdateCommand, InsertCommand, DeleteCommand}, Me.UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCompleted(Me, New UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/GetNewVersion", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewVersion(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetNewVersion", New Object() {OperationSystem, VersionID, CoreVersion})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetNewVersion(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetNewVersion", New Object() {OperationSystem, VersionID, CoreVersion}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetNewVersion(ByVal asyncResult As System.IAsyncResult) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewVersionAsync(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String)
            Me.GetNewVersionAsync(OperationSystem, VersionID, CoreVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewVersionAsync(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String, ByVal userState As Object)
            If (Me.GetNewVersionOperationCompleted Is Nothing) Then
                Me.GetNewVersionOperationCompleted = AddressOf Me.OnGetNewVersionOperationCompleted
            End If
            Me.InvokeAsync("GetNewVersion", New Object() {OperationSystem, VersionID, CoreVersion}, Me.GetNewVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewVersionCompleted(Me, New GetNewVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xxyj6450.s181.288idc.com/WebService.asmx/GetUpgrageLog", RequestNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", ResponseNamespace:="http://xxyj6450.s181.288idc.com/WebService.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUpgrageLog(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetUpgrageLog", New Object() {OperationSystem, VersionID, CoreVersion})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUpgrageLog(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUpgrageLog", New Object() {OperationSystem, VersionID, CoreVersion}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUpgrageLog(ByVal asyncResult As System.IAsyncResult) As System.Data.DataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUpgrageLogAsync(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String)
            Me.GetUpgrageLogAsync(OperationSystem, VersionID, CoreVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUpgrageLogAsync(ByVal OperationSystem As Integer, ByVal VersionID As String, ByVal CoreVersion As String, ByVal userState As Object)
            If (Me.GetUpgrageLogOperationCompleted Is Nothing) Then
                Me.GetUpgrageLogOperationCompleted = AddressOf Me.OnGetUpgrageLogOperationCompleted
            End If
            Me.InvokeAsync("GetUpgrageLog", New Object() {OperationSystem, VersionID, CoreVersion}, Me.GetUpgrageLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUpgrageLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUpgrageLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUpgrageLogCompleted(Me, New GetUpgrageLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx")>  _
    Partial Public Class Command
        
        Private commandTextField As String
        
        Private commandTypeField As System.Data.CommandType
        
        Private parametersField() As Parameter
        
        '''<remarks/>
        Public Property CommandText() As String
            Get
                Return Me.commandTextField
            End Get
            Set
                Me.commandTextField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CommandType() As System.Data.CommandType
            Get
                Return Me.commandTypeField
            End Get
            Set(value As System.Data.CommandType)
                Me.commandTypeField = Value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Parameters() As Parameter()
            Get
                Return Me.parametersField
            End Get
            Set
                Me.parametersField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx")>  _
    Public Enum CommandType
        
        '''<remarks/>
        Text
        
        '''<remarks/>
        StoredProcedure
        
        '''<remarks/>
        TableDirect
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx")>  _
    Partial Public Class Parameter
        
        Private directionField As System.Data.ParameterDirection
        
        Private sourceVersionField As System.Data.DataRowVersion
        
        Private sourceColumnField As String
        
        Private nameField As String
        
        Private typeField As System.Data.SqlDbType
        
        Private valueField As Object
        
        '''<remarks/>
        Public Property Direction() As System.Data.ParameterDirection
            Get
                Return Me.directionField
            End Get
            Set(value As System.Data.ParameterDirection)
                Me.directionField = Value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SourceVersion() As System.Data.DataRowVersion
            Get
                Return Me.sourceVersionField
            End Get
            Set(value As System.Data.DataRowVersion)
                Me.sourceVersionField = Value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SourceColumn() As String
            Get
                Return Me.sourceColumnField
            End Get
            Set
                Me.sourceColumnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As System.Data.SqlDbType
            Get
                Return Me.typeField
            End Get
            Set(value As System.Data.SqlDbType)
                Me.typeField = Value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As Object
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx")>  _
    Public Enum ParameterDirection
        
        '''<remarks/>
        Input
        
        '''<remarks/>
        Output
        
        '''<remarks/>
        InputOutput
        
        '''<remarks/>
        ReturnValue
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx")>  _
    Public Enum DataRowVersion
        
        '''<remarks/>
        Original
        
        '''<remarks/>
        Current
        
        '''<remarks/>
        Proposed
        
        '''<remarks/>
        [Default]
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://xxyj6450.s181.288idc.com/WebService.asmx")>  _
    Public Enum SqlDbType
        
        '''<remarks/>
        BigInt
        
        '''<remarks/>
        Binary
        
        '''<remarks/>
        Bit
        
        '''<remarks/>
        [Char]
        
        '''<remarks/>
        DateTime
        
        '''<remarks/>
        [Decimal]
        
        '''<remarks/>
        Float
        
        '''<remarks/>
        Image
        
        '''<remarks/>
        Int
        
        '''<remarks/>
        Money
        
        '''<remarks/>
        NChar
        
        '''<remarks/>
        NText
        
        '''<remarks/>
        NVarChar
        
        '''<remarks/>
        Real
        
        '''<remarks/>
        UniqueIdentifier
        
        '''<remarks/>
        SmallDateTime
        
        '''<remarks/>
        SmallInt
        
        '''<remarks/>
        SmallMoney
        
        '''<remarks/>
        Text
        
        '''<remarks/>
        Timestamp
        
        '''<remarks/>
        TinyInt
        
        '''<remarks/>
        VarBinary
        
        '''<remarks/>
        VarChar
        
        '''<remarks/>
        [Variant]
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        Udt
        
        '''<remarks/>
        Structured
        
        '''<remarks/>
        [Date]
        
        '''<remarks/>
        Time
        
        '''<remarks/>
        DateTime2
        
        '''<remarks/>
        DateTimeOffset
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub NotifyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub EchoOfSendSMSCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecvSMSCompletedEventHandler(ByVal sender As Object, ByVal e As RecvSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecvSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SendMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub FinishedSendMessageCompletedEventHandler(ByVal sender As Object, ByVal e As FinishedSendMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FinishedSendMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub FinishedSendMessageQueueCompletedEventHandler(ByVal sender As Object, ByVal e As FinishedSendMessageQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FinishedSendMessageQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub MatchAccountsManualCompletedEventHandler(ByVal sender As Object, ByVal e As MatchAccountsManualCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MatchAccountsManualCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AddNewMessageQueueCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewMessageQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewMessageQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AddNewMessageCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getDataCompletedEventHandler(ByVal sender As Object, ByVal e As getDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ExecuteCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetNewVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetUpgrageLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetUpgrageLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUpgrageLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
End Namespace
